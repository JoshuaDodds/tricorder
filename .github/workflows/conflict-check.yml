name: Detect Merge Conflicts

on:
  # Run when the base branch (main) receives new commits. This ensures open PRs
  # are reâ€‘checked whenever another branch is merged into main.
  push:
    branches:
      - main
  # Also check when a PR is opened, reopened or updated to reflect changes in its
  # head branch. This covers cases where the feature branch is rebased or force
  # pushed.
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize

# Grant write permissions to post comments on pull requests. Contents read
# permission is required to checkout the repository.
permissions:
  contents: read
  pull-requests: write

jobs:
  check-conflicts:
    runs-on: ubuntu-latest
    # Limit the workflow to one concurrent run. Subsequent runs are queued.
    concurrency:
      group: conflict-check
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history so merges can be tested properly
          fetch-depth: 0

      - name: Detect conflicts and comment on PRs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          git config user.email "actions@github.com"
          git config user.name "github-actions"

          pr_numbers=$(gh pr list --state open --base main --json number --jq '.[].number')
          echo "Checking for conflicts in the following PRs: $pr_numbers"

          for pr in $pr_numbers; do
            echo "\nPR #$pr"
            # Always fetch from pull ref so fork PRs work too
            git fetch origin "pull/$pr/head:pr-$pr"
            git switch -C "pr-$pr" "pr-$pr"
            git fetch origin main

            if git merge --no-commit --no-ff origin/main; then
              echo "  No merge conflicts detected."
              git merge --abort || true
            else
              echo "  Merge conflicts detected."
              conflict_files=$(git diff --name-only --diff-filter=U)
              formatted=""
              while IFS= read -r file; do
                formatted+="\n- ${file}"
              done <<< "$conflict_files"
              body="@codex please fix these conflicts before we can merge this or test it\n\n**Conflicting files:**${formatted}"
              gh api repos/${{ github.repository }}/issues/$pr/comments -f body="$body"
              git merge --abort || true
            fi
          done


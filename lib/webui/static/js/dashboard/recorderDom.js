export function createRecorderDom() {
  const documentRef = typeof document !== "undefined" ? document : null;
  if (!documentRef) {
    return {};
  }
  return {
    menuItems: documentRef.querySelectorAll(".recorder-menu-item"),
    modal: documentRef.getElementById("recorder-settings-modal"),
    dialog: documentRef.getElementById("recorder-settings-dialog"),
    close: documentRef.getElementById("recorder-settings-close"),
    configPath: documentRef.getElementById("recorder-settings-config-path"),
    saveAll: documentRef.getElementById("recorder-save-all"),
    saveAllStatus: documentRef.getElementById("recorder-save-all-status"),
    sections: {
      audio: {
        form: documentRef.getElementById("audio-form"),
        device: documentRef.getElementById("audio-device"),
        sampleRate: documentRef.getElementById("audio-sample-rate"),
        channels: documentRef.getElementById("audio-channels"),
        frameMs: documentRef.getElementById("audio-frame-ms"),
        gain: documentRef.getElementById("audio-gain"),
        vad: documentRef.getElementById("audio-vad"),
        usbReset: documentRef.getElementById("audio-usb-reset"),
        filterDenoiseEnabled: documentRef.getElementById("audio-filter-denoise-enabled"),
        filterDenoiseType: documentRef.getElementById("audio-filter-denoise-type"),
        filterDenoiseFloor: documentRef.getElementById("audio-filter-denoise-floor"),
        filterDenoiseFloorDisplay: documentRef.getElementById("audio-filter-denoise-floor-value"),
        filterHighpassEnabled: documentRef.getElementById("audio-filter-highpass-enabled"),
        filterHighpassCutoff: documentRef.getElementById("audio-filter-highpass-cutoff"),
        filterHighpassDisplay: documentRef.getElementById("audio-filter-highpass-cutoff-value"),
        filterLowpassEnabled: documentRef.getElementById("audio-filter-lowpass-enabled"),
        filterLowpassCutoff: documentRef.getElementById("audio-filter-lowpass-cutoff"),
        filterLowpassDisplay: documentRef.getElementById("audio-filter-lowpass-cutoff-value"),
        filterNotchEnabled: documentRef.getElementById("audio-filter-notch-enabled"),
        filterNotchFrequency: documentRef.getElementById("audio-filter-notch-frequency"),
        filterNotchFrequencyDisplay: documentRef.getElementById("audio-filter-notch-frequency-value"),
        filterNotchQuality: documentRef.getElementById("audio-filter-notch-quality"),
        filterNotchQualityDisplay: documentRef.getElementById("audio-filter-notch-quality-value"),
        filterSpectralGateEnabled: documentRef.getElementById("audio-filter-spectral-enabled"),
        filterSpectralGateSensitivity: documentRef.getElementById("audio-filter-spectral-sensitivity"),
        filterSpectralGateSensitivityDisplay: documentRef.getElementById("audio-filter-spectral-sensitivity-value"),
        filterSpectralGateReduction: documentRef.getElementById("audio-filter-spectral-reduction"),
        filterSpectralGateReductionDisplay: documentRef.getElementById("audio-filter-spectral-reduction-value"),
        filterSpectralGateNoiseUpdate: documentRef.getElementById("audio-filter-spectral-update"),
        filterSpectralGateNoiseUpdateDisplay: documentRef.getElementById("audio-filter-spectral-update-value"),
        filterSpectralGateNoiseDecay: documentRef.getElementById("audio-filter-spectral-decay"),
        filterSpectralGateNoiseDecayDisplay: documentRef.getElementById("audio-filter-spectral-decay-value"),
        calibrationNoise: documentRef.getElementById("audio-calibration-noise"),
        calibrationGain: documentRef.getElementById("audio-calibration-gain"),
        calibrateNoiseButton: documentRef.getElementById("audio-calibrate-noise"),
        calibrationNoiseHint: documentRef.getElementById("audio-calibration-noise-hint"),
        save: documentRef.getElementById("audio-save"),
        reset: documentRef.getElementById("audio-reset"),
        status: documentRef.getElementById("audio-status"),
      },
      segmenter: {
        form: documentRef.getElementById("segmenter-form"),
        prePad: documentRef.getElementById("segmenter-pre-pad"),
        postPad: documentRef.getElementById("segmenter-post-pad"),
        motionPaddingMinutes: documentRef.getElementById("segmenter-motion-padding-minutes"),
        threshold: documentRef.getElementById("segmenter-threshold"),
        rmsTrigger: documentRef.getElementById("segmenter-rms-trigger"),
        vadTrigger: documentRef.getElementById("segmenter-vad-trigger"),
        keepWindow: documentRef.getElementById("segmenter-keep-window"),
        startConsecutive: documentRef.getElementById("segmenter-start-consecutive"),
        keepConsecutive: documentRef.getElementById("segmenter-keep-consecutive"),
        autosplitMinutes: documentRef.getElementById("segmenter-autosplit-interval"),
        autoRecordMotion: documentRef.getElementById("segmenter-auto-record-motion"),
        flushBytes: documentRef.getElementById("segmenter-flush-bytes"),
        maxQueue: documentRef.getElementById("segmenter-max-queue"),
        minClipSeconds: documentRef.getElementById("segmenter-min-clip-seconds"),
        maxPending: documentRef.getElementById("segmenter-max-pending"),
        filterAvgBudget: documentRef.getElementById("segmenter-filter-avg"),
        filterPeakBudget: documentRef.getElementById("segmenter-filter-peak"),
        filterMetricsWindow: documentRef.getElementById("segmenter-filter-window"),
        filterLogThrottle: documentRef.getElementById("segmenter-filter-log-throttle"),
        streamingEncode: documentRef.getElementById("segmenter-streaming-encode"),
        streamingContainer: documentRef.getElementById("segmenter-streaming-container"),
        parallelEnabled: documentRef.getElementById("segmenter-parallel-enabled"),
        parallelLoad: documentRef.getElementById("segmenter-parallel-load"),
        parallelMinSeconds: documentRef.getElementById("segmenter-parallel-min-seconds"),
        parallelCpuInterval: documentRef.getElementById("segmenter-parallel-cpu-interval"),
        parallelMaxWorkers: documentRef.getElementById("segmenter-parallel-max-workers"),
        parallelOfflineLoad: documentRef.getElementById("segmenter-parallel-offline-load"),
        parallelOfflineInterval: documentRef.getElementById("segmenter-parallel-offline-interval"),
        parallelBuckets: documentRef.getElementById("segmenter-parallel-buckets"),
        parallelUpdateInterval: documentRef.getElementById("segmenter-parallel-update-interval"),
        eventTagHuman: documentRef.getElementById("segmenter-event-tag-human"),
        eventTagOther: documentRef.getElementById("segmenter-event-tag-other"),
        eventTagBoth: documentRef.getElementById("segmenter-event-tag-both"),
        useRnnoise: documentRef.getElementById("segmenter-use-rnnoise"),
        useNoisereduce: documentRef.getElementById("segmenter-use-noisereduce"),
        denoiseBeforeVad: documentRef.getElementById("segmenter-denoise-before-vad"),
        save: documentRef.getElementById("segmenter-save"),
        reset: documentRef.getElementById("segmenter-reset"),
        status: documentRef.getElementById("segmenter-status"),
      },
      adaptive_rms: {
        form: documentRef.getElementById("adaptive-form"),
        enabled: documentRef.getElementById("adaptive-enabled"),
        minRms: documentRef.getElementById("adaptive-min-rms"),
        minThresh: documentRef.getElementById("adaptive-min-thresh"),
        maxRms: documentRef.getElementById("adaptive-max-rms"),
        margin: documentRef.getElementById("adaptive-margin"),
        updateInterval: documentRef.getElementById("adaptive-update-interval"),
        window: documentRef.getElementById("adaptive-window"),
        hysteresis: documentRef.getElementById("adaptive-hysteresis"),
        release: documentRef.getElementById("adaptive-release"),
        voicedHold: documentRef.getElementById("adaptive-voiced-hold"),
        save: documentRef.getElementById("adaptive-save"),
        reset: documentRef.getElementById("adaptive-reset"),
        status: documentRef.getElementById("adaptive-status"),
      },
      ingest: {
        form: documentRef.getElementById("ingest-form"),
        stableChecks: documentRef.getElementById("ingest-stable-checks"),
        stableInterval: documentRef.getElementById("ingest-stable-interval"),
        allowedExt: documentRef.getElementById("ingest-allowed-ext"),
        ignoreSuffixes: documentRef.getElementById("ingest-ignore-suffixes"),
        save: documentRef.getElementById("ingest-save"),
        reset: documentRef.getElementById("ingest-reset"),
        status: documentRef.getElementById("ingest-status"),
      },
      transcription: {
        form: documentRef.getElementById("transcription-form"),
        enabled: documentRef.getElementById("transcription-enabled"),
        engine: documentRef.getElementById("transcription-engine"),
        types: documentRef.getElementById("transcription-types"),
        modelPath: documentRef.getElementById("transcription-model-path"),
        modelRefresh: documentRef.getElementById("transcription-model-refresh"),
        modelDiscovery: documentRef.getElementById("transcription-model-discovery"),
        modelOptions: documentRef.getElementById("transcription-model-options"),
        modelApply: documentRef.getElementById("transcription-model-apply"),
        modelDismiss: documentRef.getElementById("transcription-model-dismiss"),
        modelStatus: documentRef.getElementById("transcription-model-status"),
        targetSampleRate: documentRef.getElementById("transcription-target-sample-rate"),
        includeWords: documentRef.getElementById("transcription-include-words"),
        maxAlternatives: documentRef.getElementById("transcription-max-alternatives"),
        save: documentRef.getElementById("transcription-save"),
        reset: documentRef.getElementById("transcription-reset"),
        status: documentRef.getElementById("transcription-status"),
      },
      logging: {
        form: documentRef.getElementById("logging-form"),
        devMode: documentRef.getElementById("logging-dev-mode"),
        save: documentRef.getElementById("logging-save"),
        reset: documentRef.getElementById("logging-reset"),
        status: documentRef.getElementById("logging-status"),
      },
      paths: {
        form: documentRef.getElementById("paths-form"),
        tmpDir: documentRef.getElementById("paths-tmp-dir"),
        recordingsDir: documentRef.getElementById("paths-recordings-dir"),
        dropboxDir: documentRef.getElementById("paths-dropbox-dir"),
        ingestDir: documentRef.getElementById("paths-ingest-dir"),
        encoderScript: documentRef.getElementById("paths-encoder-script"),
        save: documentRef.getElementById("paths-save"),
        reset: documentRef.getElementById("paths-reset"),
        status: documentRef.getElementById("paths-status"),
      },
      notifications: {
        form: documentRef.getElementById("notifications-form"),
        enabled: documentRef.getElementById("notifications-enabled"),
        allowedTypes: documentRef.getElementById("notifications-allowed-types"),
        minTrigger: documentRef.getElementById("notifications-min-trigger"),
        webhookUrl: documentRef.getElementById("notifications-webhook-url"),
        webhookMethod: documentRef.getElementById("notifications-webhook-method"),
        webhookHeaders: documentRef.getElementById("notifications-webhook-headers"),
        webhookTimeout: documentRef.getElementById("notifications-webhook-timeout"),
        emailHost: documentRef.getElementById("notifications-email-host"),
        emailPort: documentRef.getElementById("notifications-email-port"),
        emailTls: documentRef.getElementById("notifications-email-tls"),
        emailSsl: documentRef.getElementById("notifications-email-ssl"),
        emailUsername: documentRef.getElementById("notifications-email-username"),
        emailPassword: documentRef.getElementById("notifications-email-password"),
        emailFrom: documentRef.getElementById("notifications-email-from"),
        emailTo: documentRef.getElementById("notifications-email-to"),
        emailSubject: documentRef.getElementById("notifications-email-subject"),
        emailBody: documentRef.getElementById("notifications-email-body"),
        save: documentRef.getElementById("notifications-save"),
        reset: documentRef.getElementById("notifications-reset"),
        status: documentRef.getElementById("notifications-status"),
      },
      streaming: {
        form: documentRef.getElementById("streaming-form"),
        mode: documentRef.getElementById("streaming-mode"),
        history: documentRef.getElementById("streaming-history"),
        save: documentRef.getElementById("streaming-save"),
        reset: documentRef.getElementById("streaming-reset"),
        status: documentRef.getElementById("streaming-status"),
      },
      dashboard: {
        form: documentRef.getElementById("dashboard-form"),
        apiBase: documentRef.getElementById("dashboard-api-base"),
        save: documentRef.getElementById("dashboard-save"),
        reset: documentRef.getElementById("dashboard-reset"),
        status: documentRef.getElementById("dashboard-status"),
      },
    },
  };
}
